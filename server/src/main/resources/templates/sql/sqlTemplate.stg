/*
    <<
    Davinci
    ==
    Copyright (C) 2016 - 2018 EDP
    ==
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    >>
 */


createTable(tableName, fields, primaryKeys, indexKeys)
::=<<
CREATE TABLE `<tableName>` (
    <fields:{field|`<field.name>` <field.type>};separator=",\n">
    <if(primaryKeys)>
    ,
    PRIMARY KEY (<primaryKeys:{pk| `<pk>`};separator=",">)
    <endif>
    <if(indexKeys)>
    ,
    <indexKeys:{idx|<idx.keys:{k|KEY `<k>` (`<idx.(k)>`)}>};separator=",\n">
    <endif>
) DEFAULT CHARSET=utf8;
>>


insertData(tableName, columns)
::=<<
<if(columns)>
INSERT INTO `<tableName>`
(<columns:{item|<if(item.name)>`<item.name>`<endif>};separator=",">)
VALUES
(<columns:{item|<if(item.name)>?<endif>};separator=",">)
<endif>
>>


queryAll(tableName, keywordPrefix, keywordSuffix)
::=<<
<if(tableName)>
<if(keywordPrefix && keywordSuffix)>
SELECT * FROM <keywordPrefix><tableName><keywordSuffix>
<else>
SELECT * FROM <tableName>
<endif>
<endif>
>>


queryChildSql(nativeQuery, groups, typeGroups, aggregators, filters, orders, sql, keywordPrefix, keywordSuffix)
::=<<
<if(!groups && !aggregators && !filters && !orders && !typeGroups)>
<sql>
<else>
SELECT
<if(!groups && !aggregators && !typeGroups)>
 *
<endif>
<if(groups)>
 <groups:{group|<if(keywordPrefix && keywordSuffix)><keywordPrefix><group><keywordSuffix><else><group><endif>}; separator=",">
<endif>
<! group层级维度聚合运算 !>
<if(typeGroups)>
<if(groups)>,<endif>
 <typeGroups:{typeGroup|<typeGroup.agg> AS <typeGroup.column>_<typeGroup.formatType>_TYPE}; separator=",">
<endif>
<if((groups && aggregators) || (typeGroups && aggregators))>,<endif>
<if(aggregators)>
<if(nativeQuery)>
 <aggregators:{agg|<if(agg)><if(keywordPrefix && keywordSuffix)><keywordPrefix><agg.column><keywordSuffix><else><agg.column><endif><endif>}; separator=",">
<else>
 <aggregators:{agg|<if(agg)><agg.column><endif>}; separator=",">
<endif>
<endif>
FROM (<sql>) T
<if(filters)>
WHERE <filters:{filter|<if(filter)><filter><endif>}; separator=" AND ">
<endif>
<if(groups)>
<if(!nativeQuery)>
GROUP BY <groups:{group|<if(keywordPrefix && keywordSuffix)><keywordPrefix><group><keywordSuffix><else><group><endif>}; separator=",">
<endif>
<endif>
<! group层级维度聚合运算 !>
<if(typeGroups)>
<if(groups)>,<else> GROUP BY <endif>
 <typeGroups:{typeGroup|<typeGroup.agg>}; separator=",">
<endif>
<endif>
>>

querySql(nativeQuery, groups, typeGroups, aggregators, filters, orders, sql, keywordPrefix, keywordSuffix, valueFilters)
::=<<
SELECT
L4.*
FROM
(
SELECT
<if(!groups && !aggregators && !typeGroups)>*<endif>
<if(groups)>
 <groups:{group|<if(keywordPrefix && keywordSuffix)><keywordPrefix><group><keywordSuffix><else><group><endif>}; separator=",">
<endif>
<! group层级维度聚合运算 !>
<if(typeGroups)>
<if(groups)>,<endif>
<typeGroups:{typeGroup| <if(typeGroup.columnAgg)><typeGroup.columnAgg><else><typeGroup.column>_<typeGroup.formatType>_TYPE AS <typeGroup.columnAlias><endif>  }; separator=",">
<endif>
<if((groups && aggregators) || (typeGroups && aggregators))>,<endif>
<if(aggregators)>
<if(nativeQuery)>
 <aggregators:{agg|<if(agg)><if(keywordPrefix && keywordSuffix)><keywordPrefix><agg.column><keywordSuffix><else><agg.column><endif><endif>}; separator=",">
<else>
 <aggregators:{agg|<if(agg)>`<agg.alias>`<endif>}; separator=",">
<endif>
<endif>
FROM
(<queryChildSql(nativeQuery, groups, typeGroups, aggregators, filters, orders, sql, keywordPrefix, keywordSuffix)>) L3
) L4
<! 数据的筛选 !>
<if(valueFilters)>
WHERE <valueFilters:{filter|<if(filter)><filter><endif>}; separator=" AND ">
<endif>
<! group层级维度聚合运算 !>
<if(typeGroups)>
<if(valueFilters)>
     AND <else> WHERE
<endif>
<typeGroups:{typeGroup| <typeGroup.columnAlias> != ""}; separator=" AND ">
<endif>
<if(orders)>
ORDER BY <orders:{order|<if(order)>`<order.column>` <order.direction><endif>}; separator=", ">
<endif>
>>


queryFastCalculateSql(originSql,fastCalculateSql,fastCalculateTypes, groups, aggregators, keywordPrefix, keywordSuffix)
::=<<
SELECT
<if(groups)>
<groups:{group|<if(keywordPrefix && keywordSuffix)>A.<keywordPrefix><group><keywordSuffix><else>A.<group><endif>}; separator=",">
<endif>
<if(groups && aggregators)>,<endif>
<if(aggregators)><aggregators:{agg|
<if(agg)>
 <!有同步环比计算&&有维度!>
  <if(fastCalculateTypes && groups)>
  A<agg.fastCalculateType>.
  <else>
     <!没有维度&&是同比环比（不需要join）!>
     <if(agg.fastCalculateType)>
     B.
     <!一般指标计算!>
     <else>
     A.
     <endif>
  <endif>`<agg.alias>`
<endif>}; separator=",">
<endif>
FROM
(<originSql>) A
<if(fastCalculateSql && fastCalculateTypes && groups)>
LEFT JOIN
 <fastCalculateTypes:{type|
 (<fastCalculateSql>) A<type>
 ON
 <groups:{group| A<type>.<group> = A.<group>};separator=" AND ">
 }; separator=" LEFT JOIN ">
<elseif(fastCalculateSql)>
 LEFT JOIN
 (<fastCalculateSql>) B ON 1=1
<endif>
>>


queryDistinctSql(columns, filters, sql, keywordPrefix, keywordSuffix)
::=<<
<if(columns && sql)>
<if(keywordPrefix && keywordSuffix)>
SELECT DISTINCT <columns:{column|<if(column)>T.<keywordPrefix><column><keywordSuffix><endif>}; separator=","> FROM (<sql>) T
<if(filters)>
WHERE <filters:{filter|<if(filter)><filter><endif>}; separator=" AND ">
<endif>
ORDER BY <columns:{column|<if(column)>T.<keywordPrefix><column><keywordSuffix><endif>}; separator=",">
<else>
SELECT DISTINCT <columns:{column|<if(column)>T.<column><endif>}; separator=","> FROM (<sql>) T
<if(filters)>
WHERE <filters:{filter|<if(filter)><filter><endif>}; separator=" AND ">
<endif>
ORDER BY <columns:{column|<if(column)>T.<column><endif>}; separator=",">
<endif>
<endif>
>>